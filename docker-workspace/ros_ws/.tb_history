import("generator")
ls
cd gen
ls
setPeriod 
setPeriod 0.1
setPeriod(0.1)
setPeriod(0.01)
setPeriod(0.001)
setPeriod(1)
ls
omega(5)
omega(1)
cd gen
ls
setSineFrequency 
setSineFrequency(2)
setSineFrequency(1
setSineFrequency(1)
setSineFrequency(10)
ls
cd gen
ls
setSineFrequency(1)
setSineFrequency(2)
setSineFrequency(10)
ls
cd log
ls
cd ..
ls
cd gen
ls
cd ..
ls
cd log
ls
cd log
ls
verbose = true
verbose=false
verbose=true
verbose=false
exit
ls
cd gen
ls
rosout_active = true
complexout_active = true
complexout_active = false
cd ..
gen.complexout_active = true
ls
cd log
ls
cd ..
ls
cd gen
ls
cd ..
ls
cd gen
clc
clear
cd ..
clear
clc
cls
cd gen
ls
simpleOut.read()
exit
cd gen
ls
cd gen
ls
simpleOut.last
simpleOut.last
simpleOut.last()
complexOut.last()
complexOut.msg.last()
clc
clr
exit
cd log
ls
simpleInput.read(sample)
simpleInput.read()
double lol;
simpleInput.read(lol)
ls
cd gen
ls
cd ge
cd gen
ls
cd gen
ls
cd gen
ls
cd log
ls
cd ..
ls
cd log
ls
cd ..
cd gen
ls
cd ..
cd log
ls
cd gen
ls
cd gen
ls
cd gen
ls
#lol
//lol
cd gen
ls
cd..
ls
cd ..
ls
all
ls
Peers
cd deriv
l
ls
ls
getCpuAffinity
isConfigured
cd derivative 
ls
getPeriod
setPeriod(0.01)
setPeriod(0.0001)
setPeriod(0.001)
setPeriod(0.0001)
setPeriod(0.001)
setPeriod(0.01)
cd derivative 
ls
setPeriod(0.01)
setPeriod(0.001)
setPeriod(0.0001)
ls
cd amp
ls
cd ..
ls
cd gen
ls
cd ..
cd amp
ls
gen.setSineFrequency(1)
gen.setSineFrequency(0)
gen.setSineFrequency(3.14)
gen.setSineFrequency(3.18)
gen.setSineFrequency(1)
gen.setSineFrequency(0)
gen.setSineFrequency(6.28)
cd gen
ls
gen.setSineFrequency(3)
gen.setSineFrequency(0.3)
gen.setSineFrequency(0.5)
cd gen. 
cd gen
ls
omega = 1
ls
cd mathObj
ls
cd integral
ls
cd mathObj
ls
cd ..
amp.Gain = -0.5
ls
cd sum
ls
cd log3
ls
var double sample
sample
readIn.read(sample)
simpleIn.read(sample)
simpleIn.read(sample)
